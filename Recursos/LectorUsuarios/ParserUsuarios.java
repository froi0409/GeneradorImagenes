
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.froi.generadorfiguras.analizadores.usuarios;

import com.froi.generadorfiguras.estructuras.ArbolAVL;
import com.froi.generadorfiguras.estructuras.ListaDobleImg;
import com.froi.generadorfiguras.estructuras.ListaEnlazadaDobleCircular;
import com.froi.generadorfiguras.nodos.NodoAVL;
import com.froi.generadorfiguras.nodos.NodoListaDobleC;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserUsuarios extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserUsuariosSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserUsuarios() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserUsuarios(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserUsuarios(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\011\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\006\000\002\005\005\000\002\005\004" +
    "\000\002\005\002\000\002\004\003\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\016\000\010\002\uffff\011\004\012\007\001\002\000" +
    "\014\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\001\002" +
    "\000\004\007\013\001\002\000\010\002\uffff\011\004\012" +
    "\007\001\002\000\014\006\ufff9\007\ufff9\010\ufff9\011\ufff9" +
    "\012\ufff9\001\002\000\004\002\011\001\002\000\004\002" +
    "\001\001\002\000\004\002\000\001\002\000\012\006\ufffb" +
    "\010\ufffb\011\ufffb\012\ufffb\001\002\000\012\006\015\010" +
    "\016\011\004\012\007\001\002\000\006\011\004\012\007" +
    "\001\002\000\010\002\ufffe\011\ufffe\012\ufffe\001\002\000" +
    "\012\006\ufffc\010\ufffc\011\ufffc\012\ufffc\001\002\000\012" +
    "\006\ufffd\010\ufffd\011\ufffd\012\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\016\000\010\002\007\003\005\004\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\011\003\005" +
    "\004\004\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\013\001\001" +
    "\000\004\004\016\001\001\000\004\004\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserUsuarios$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserUsuarios$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserUsuarios$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private ArbolAVL arbolUsuarios;
    private ListaEnlazadaDobleCircular listaImagenes;

    public ParserUsuarios(UsuariosLexer lexer, ArbolAVL arbolUsuarios, ListaEnlazadaDobleCircular listaImagenes) {
        super(lexer);
        this.arbolUsuarios = arbolUsuarios;
        this.listaImagenes = listaImagenes;
    }

    public void report_error(String message, Object info) {
        System.out.println("reporterror");
    }
    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal " + info);
    }
    @Override
    public void syntax_error(Symbol s) {
        System.out.println("linea: " + s.left + "   columna: " + s.right);
    }
    protected int error_sync_size() {
        return 1;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserUsuarios$actions {
  private final ParserUsuarios parser;

  /** Constructor */
  CUP$ParserUsuarios$actions(ParserUsuarios parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserUsuarios$do_action_part00000000(
    int                        CUP$ParserUsuarios$act_num,
    java_cup.runtime.lr_parser CUP$ParserUsuarios$parser,
    java.util.Stack            CUP$ParserUsuarios$stack,
    int                        CUP$ParserUsuarios$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserUsuarios$result;

      /* select the action based on the action number */
      switch (CUP$ParserUsuarios$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-1)).value;
		RESULT = start_val;
              CUP$ParserUsuarios$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-1)), ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserUsuarios$parser.done_parsing();
          return CUP$ParserUsuarios$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= inicio_p inicio 
            {
              Object RESULT =null;

              CUP$ParserUsuarios$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-1)), ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.peek()), RESULT);
            }
          return CUP$ParserUsuarios$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= 
            {
              Object RESULT =null;

              CUP$ParserUsuarios$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.peek()), RESULT);
            }
          return CUP$ParserUsuarios$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio_p ::= identificador PUNTOS imagenes PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-1)).right;
		ListaDobleImg lista = (ListaDobleImg)((java_cup.runtime.Symbol) CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-1)).value;
		
                    try {
                        NodoAVL nuevoNodo = new NodoAVL(id.toString(), lista);
                        System.out.println("esta a punto de insertarse al usuario: " + id.toString());
                        arbolUsuarios.insertar(nuevoNodo);
                        System.out.println("Se insert√≥ al usuario " + id.toString() + " y su lista es: ");
                    } catch(RuntimeException e) {
                        System.out.println("Error al insertar al usuario: " + id.toString());
                    }
                
              CUP$ParserUsuarios$result = parser.getSymbolFactory().newSymbol("inicio_p",1, ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-3)), ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.peek()), RESULT);
            }
          return CUP$ParserUsuarios$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // imagenes ::= imagenes COMA identificador 
            {
              ListaDobleImg RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-2)).right;
		ListaDobleImg lista = (ListaDobleImg)((java_cup.runtime.Symbol) CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserUsuarios$stack.peek()).value;
		
                    try {
                        NodoListaDobleC imagen = listaImagenes.buscar(id.toString());
                        lista.insertar(imagen);
                        System.out.println("Se insert√≥ la imagen en la lista: " + id.toString());
                    } catch(Exception e) {
                        System.out.println("Error al buscar la imagen: " + id.toString());
                    }
                    RESULT = lista;
                
              CUP$ParserUsuarios$result = parser.getSymbolFactory().newSymbol("imagenes",3, ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-2)), ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.peek()), RESULT);
            }
          return CUP$ParserUsuarios$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // imagenes ::= imagenes identificador 
            {
              ListaDobleImg RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-1)).right;
		ListaDobleImg lista = (ListaDobleImg)((java_cup.runtime.Symbol) CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserUsuarios$stack.peek()).value;
		
                    try {
                        NodoListaDobleC imagen = listaImagenes.buscar(id.toString());
                        lista.insertar(imagen);
                        System.out.println("Se insert√≥ la imagen en la lista: " + id.toString());
                    } catch(Exception e) {
                        System.out.println("Error al buscar la imagen: " + id.toString());
                    }
                    RESULT = lista;
                
              CUP$ParserUsuarios$result = parser.getSymbolFactory().newSymbol("imagenes",3, ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-1)), ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.peek()), RESULT);
            }
          return CUP$ParserUsuarios$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // imagenes ::= 
            {
              ListaDobleImg RESULT =null;
		System.out.println("Se cre√≥ la lista"); RESULT = new ListaDobleImg();
              CUP$ParserUsuarios$result = parser.getSymbolFactory().newSymbol("imagenes",3, ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.peek()), RESULT);
            }
          return CUP$ParserUsuarios$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // identificador ::= NUMERO 
            {
              Object RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.peek()).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$ParserUsuarios$stack.peek()).value;
		RESULT=param;
              CUP$ParserUsuarios$result = parser.getSymbolFactory().newSymbol("identificador",2, ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.peek()), RESULT);
            }
          return CUP$ParserUsuarios$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // identificador ::= ALFANUMERICO 
            {
              Object RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.peek()).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$ParserUsuarios$stack.peek()).value;
		RESULT=param;
              CUP$ParserUsuarios$result = parser.getSymbolFactory().newSymbol("identificador",2, ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.peek()), RESULT);
            }
          return CUP$ParserUsuarios$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserUsuarios$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserUsuarios$do_action(
    int                        CUP$ParserUsuarios$act_num,
    java_cup.runtime.lr_parser CUP$ParserUsuarios$parser,
    java.util.Stack            CUP$ParserUsuarios$stack,
    int                        CUP$ParserUsuarios$top)
    throws java.lang.Exception
    {
              return CUP$ParserUsuarios$do_action_part00000000(
                               CUP$ParserUsuarios$act_num,
                               CUP$ParserUsuarios$parser,
                               CUP$ParserUsuarios$stack,
                               CUP$ParserUsuarios$top);
    }
}

}
